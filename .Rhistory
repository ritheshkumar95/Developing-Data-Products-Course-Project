dim(is.na(data))
colSums(is.na(data))
colSums(is.na(data))==0
which(colSums(is.na(data))==0)
which(as.numeric(colSums(is.na(data)))==0)
cleanData <- which(as.numeric(colSums(is.na(data)))==0)
names(cleanDat)
names(cleanData)
cleanData <- data[,which(as.numeric(colSums(is.na(data)))==0)]
names(cleanData)
necessaryData <- cleandata[,-c(1:7)]
necessaryData <- cleanData[,-c(1:7)]
nearZeroVar(necessaryData)
library(caret)
nearZeroVar(necessaryData)
inTrain <- createDataPartition(necessaryData$classe,p=0.6,list=FALSE)
training <- necessaryData[inTrain,]
testing <- necessaryData[-inTrain,]
modFit <- train(classe~.,data=training,method="rpart")
predict(modFit,testing)
confusionMatrix(testing$classe,predict(modFit,testing))
?train
?trainControl
modFit <- train(classe~.,data=training,method="rf",trControl <- trainControl(method="cv",number=4,allowParallel=TRUE))
modFit <- train(classe~.,data=training,method="rf",trControl = trainControl(method="cv",number=4,allowParallel=TRUE,verboseIter=TRUE))
modFit <- train(classe~.,data=training,method="rf",trControl = trainControl(method="boot",allowParallel=TRUE,verboseIter=TRUE))
sapply(data,function(x) sum(is.na(x)))
table(sapply(data,function(x) sum(is.na(x))))
data <- read.csv("pml-training.csv",na.string=c("","NA","NULL"))
table(sapply(data,function(x) sum(is.na(x))))
cleanData <- data[,which(as.numeric(colSums(is.na(data)))==0)]
nearZeroVar(cleanData)
cleanData <- cleanData[,-c(1:7)] #First 7 Columns Of The dataset are removed
nearZeroVar(cleanData)
findCorrelation(cleanData)
?findCorrelation
modFit <- train(classe~.,data=training,method="gbm",verbose=FALSE)
modFit <- train(classe~.,data=training,method="rpart",verbose=FALSE)
modFit <- train(classe~.,data=training,method="rpart")
modFit <- train(classe~.,data=training,method="rpart",trControl = trainControl(method="cv",number=4,allowParallel=TRUE))
confusionMatrix(testing$classe,predict(modFit,testing))
cleanData <- data[,which(as.numeric(colSums(is.na(data)))==0)]
cleanData <- cleanData[,-c(1:7)] #First 7 Columns Of The dataset are removed
inTrain <- createDataPartition(cleanData$classe,p=0.7,list=FALSE)
training <- cleanData[inTrain,]
testing <- cleanData[-inTrain,]
modFit <- train(classe~.,data=training,method="rpart",trControl = trainControl(method="cv",number=4,allowParallel=TRUE))
confusionMatrix(testing$classe,predict(modFit,testing))
any(is.na(training))
any(is.na(testing))
modFit <- train(classe~.,data=training,method="rf",trControl = trainControl(method="cv",number=4,allowParallel=TRUE))
modFit <- train(classe~.,data=training,method="rf",trControl = trainControl(method="cv",number=4,allowParallel=TRUE,verboseIter=TRUE))
library(doMC)
registerDoMC(cores=2)
modFit <- train(classe~.,data=training,method="rf",trControl = trainControl(method="cv",number=4,allowParallel=TRUE,verboseIter=TRUE))
?train
library(caret)
?train
?trainControl
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
mod1 <- train(y~.,data=vowel.train,method="rf")
library(caret)
mod1 <- train(y~.,data=vowel.train,method="rf")
mod2 <- train(y~.,data=vowel.train,method="gbm")
mod2
mode2$finalModel
mod2$finalModel
summary(mod2$finalModel)
predict(mod1,vowel.test)
confusionMatrix(predict(mod1,vowel.test),vowel.test$y)
confusionMatrix(predict(mod2,vowel.test),vowel.test$y)
confusionMatrix(predict(mod1,vowel.test),vowel.test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
mod1 <- train(diagnosis~.,data=training,method="rf")
mod2 <- train(diagnosis~.,data=training,method="gbm")
mod3 <- train(diagnosis~.,data=training,method="lda")
pred1 <- predict(mod1,testing)
pred2 <- predict(mod2,testing)
pred3 <- predict(mod3,testing)
preds <- as.data.frame(pred1,pred2,pred3,testing$diagnosis)
testing$diagnosis
pred1
pred2
pred3
data.frame(pred1,pred2,pred3,testing$diagnosis)
predDF <- data.frame(pred1,pred2,pred3,testing$diagnosis)
combMod <- train(diagnosis~.,data=predDF,method="rf")
names(predDF)
combMod <- train(testing.diagnosis~.,data=predDF,method="rf")
predict(combMod,testing)
predict(combMod,predDF)
confusionMatrix(predict(combMod,predDF),prefDF$testing.diagnosis)
confusionMatrix(predict(combMod,predDF),predDF$testing.diagnosis)
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
ibrary(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(32433)
set.seed(62433)
pred1 <- train(diagnosis~.,data=training,method="rf")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(@33)
set.seed(233)
mod <- train(CompressiveStrength~.,data=training,method="lasso")
mod <- train(CompressiveStrength~.,data=training,method="lasso")
plot(mod)
plot(mod$finalModel)
plot.enet
?plot.enet
class(mod$finalModel)
plot(mod$finalModel)
names(training)
mod$finalModel
qplot(mod$finalModel)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstrain
plot(tstrain)
qplot(tstrain)
plot(tstrain)
?bats
library(forecast)
install.packages(forecast)
install.packages("forecast")
?bats
library(forecast)
?bats
names(tstrain)
bats(tstrain)
mod <- bats(tstrain)
fcast <- forecast(mod)
plot(fcast)
accuracy(fcast,testing)
accuracy(fcast,ts(testing$visitsTumblr))
mod
tstest <- ts(testing$visitsTumblr)
accuracy(fcast,tstest)
plot(fcast)
plot(tstrain)
plot(tstest)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
mod <- bats(tstrain)
forecast(mod)
fcast <- forecast(mod)
accuracy(fcast,tstest)
accuracy(fcast,testing$visitsTumblr)
bats$upper
mode$upper
mod$upper
fcast$upper
accuracy(fcast$upper,testing$visitsTumblr)
accuracy(fcast$lower,testing$visitsTumblr)
fcast$upper
fcast
testing$visitingTumblrs
testing$visitsTumblrs
testing$visitsTumblr
training$visitsTumblr
testing$visitsTumblr
accuracy(fcast,testing$visitsTumblr)
?accuracy
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
mod <- train(CompressiveStrength,data=training,method="svm")
names(training)
mod <- train(CompressiveStrength~.,data=training,method="svm")
?train
mod <- train(CompressiveStrength~.,data=training,method="svmLinear")
predict(mod,testing)
summary(predict(mod,testing))
confusionMatrix(predict(mod,testing),testing)
confusionMatrix(predict(mod,testing),testing$CompressiveStrength)
class(predict(mod,testing))
class(testing$CompressiveStrength)
testing$CompressiveStrength
confusionMatrix(predict(mod,testing),testing$CompressiveStrength)
length(predict(mod,testing))
length(testing$CompressiveStrength)
?RMSE
RMSE(predict(mod,testing),testing$CompressiveStrength)
RMSE(predict(mod,testing),testing$CompressiveStrength,na.rm=TRUE
)
RMSE(pred=predict(mod,testing),obs=testing$CompressiveStrength,na.rm=TRUE
)
mod <- train(CompressiveStrength~.,data=training,method="svmRadial")
RMSE(pred=predict(mod,testing),obs=testing$CompressiveStrength,na.rm=TRUE
)
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast(mod)
fcast$upper
tstrain
testing
fcast$upper
predict(fcast,testing$visitsTumblr)
testing$visitsTumblr
row.names(predict(fcast,testing$visitsTumblr))
row.names(predict(fcast,testing$visitsTumblr))
row.names(predict(fcast,testing$visitsTumblr))
predict(fcast,testing$visitsTumblr)
install.packages("shiny")
library(shiny)
data(mtcars)
summary(mtcars)
names(mtcars)
str(mtcars)
?mtcars
data$cyl <- as.factor(Data$cyl)
data$cyl <- as.factor(data$cyl)
data$cyl
data <- mtcars
data$cyl
data$cyl <- as.factor(data$cyl)
data$vs
data$vs <- as.factor(data$vs)
data$am <- as.factor(data$am)
data$gear
data$gear <- as.factor(data$gear)
data$carb
data$carb <- as.factor(data$carb)
install.packages("rCharts")
library(rCharts)
library("rCharts")
library("rcharts")
install.packages("rCharts")
install_github('rCharts','ramnathv')
library(devtools)
install_github('rCharts','ramnathv')
library(rCharts)
var1 <- "mpg"
var2 <- "disp"
var3 <- "cyl"
nPlot(var1~var2,group=var3,data=data)
nPlot(mpg~disp,group=cyl,data=data)
names(data)
nPlot(mpg~disp,data=data)
?nPlot
??nPlot
n1 <- nPlot(var1~var2,group=var3,data=data)
n1$save('fig/n1.html',cdn=TRUE)
n1$save('Figures/n1.html',cdn=TRUE)
setwd("~/DevelopingDataProducts")
n1$save('Figures/n1.html',cdn=TRUE)
cat('<iframe src="Figures/n1.html" width=100%, heigh=600></iframe>')
n1$html()
runApp(DevelopingDataProducts)
?runApp
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?qplot
library(ggplot2)
?qplot
runApp()
runApp()
runApp()
runApp()
runApp()
?plot
runApp()
qplot(mpg~disp,data=mtcars)
qplot(x=mpg,y=disp,data=mtcars)
qplot(x=mpg,y=disp,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=mtcars) + geom_smooth()
names(mtcars)
qplot(x=mpg,y=cyl,data=mtcars) + geom_smooth()
?qplot
qplot(x=mpg,y=disp,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets='cyl',data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=mtcars$cyl,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,data=mtcars) + geom_smooth()
mtcars$cyl
qplot(x=mpg,y=disp,facets=cyldata=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=as.factor(cyl),data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=am,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,data=mtcars) + geom_smooth()
nPlot(mpg~disp,group=cyl,data=mtcars)
qplot(x=mpg,y=disp,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=mtcars) + geom_smooth()
qplot(x=mpg,y=disp,facets=cyl,data=data) + geom_smooth()
qplot(x=mpg,y=disp,facets=data$cyl,data=data) + geom_smooth()
data$cyl
qplot(x=mpg,y=disp,facets=cyl,data=data) + geom_smooth()
?qplot
qplot(x=mpg,y=disp,facets=mpg~am,data=data) + geom_smooth()
qplot(x=mpg,y=disp,facets=mpg~am,data=data)
qplot(x=mpg,y=disp,facets=disp~am,data=data)
qplot(x=mpg,y=disp,facets=.~am,data=data)
qplot(x=mpg,y=disp,facets=.~am,data=data) + geom_smooth()
runApp()
runApp()
var1 <- "mpg"
var2 <- "cyl"
qplot(var1,var2,data)
?qplot
data$var1
names(mtcars)
runApp()
runApp()
?formula
as.formula(cat(".~",var1))
var1
as.formula(cat(".~",var1))
cat(".~",var1)
cat(".~",var1,sep="")
as.formula(cat(".~",var1,sep=""))
as.formula("y~x1+x2")
as.formula(var1)
var1
as.formula(cat(".~",var1,sep=""))
as.formula(paste(".~",var1,sep=""))
as.formula(var1)
as.formula(var2)
as.formula(cat(var2))
as.formula(paste(var2))
as.formula(paste(var2,""))
as.formula(var3)
var3
var1
as.formula(var1)
as.formula(paste(var1,"")
)
as.formula(paste(var1,"~",var2))
qplot(as.formula(paste(var1,"~",var2)),data=data)
qplot(mpg~cyl,data=mtcars)
?qplot
as.formula("mpg")
as.formula("cyl")
as.formula("dist")
?ggplot
ggplot(data,aes(x="mpg",y="cyl"))
ggplot(data,aes(x="mpg",y="cyl")) + geom_point()
ggplot(data,aes(x=mpg,y=cyl)) + geom_point()
?aes
as.value("mpg")
ggplot(data,aes_string(x="mpg",y="cyl")) + geom_point()
ggplot(data,aes_string(x="mpg",y="dist",groups="cyl")) + geom_point()
ggplot(data,aes_string(x="mpg",y="dist",group="cyl")) + geom_point()
?aes
ggplot(data,aes_string(x="mpg",y="dist")) + geom_point()
ggplot(data,aes_string(x="mpg",y="cyl")) + geom_point()
ggplot(data,aes_string(x="mpg",y="dist")) + geom_point()
data$mpg
data$dist
ggplot(data,aes_string(x="mpg",y="disp")) + geom_point()
?facet_grid
ggplot(data,aes_string(x="mpg",y="disp")) + geom_point() + facet_grid(.~am)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?shinyUI
runApp()
?tabPanel
runApp()
runApp()
runApp()
nPlot(mpg~dist,group='cyl',data=mtcars)
nPlot(mpg~dist,data=mtcars)
n1 <- nPlot(mpg~dist,data=mtcars)
?nPlot
library(rCharts)
?nPlot
n1 <- nPlot(mpg~dist,data=mtcars)
?rPlot
n1 <- nPlot(mpg~dist,type='multiBarChart',data=mtcars)
n1 <- nPlot(mpg~dist,type='multiBarChart',data=data)
n1 <- nPlot(x=mpg,y=dist,type='multiBarChart',data=data)
n1$print()
n1 <- nPlot(x=mpg,y=dist,group='cyl',type='multiBarChart',data=data)
n1 <- nPlot(x=mpg,y=dist,group='cyl',type='multiBarChart',data=data)
n1 <- nPlot(x='mpg',y='dist',group='cyl',type='multiBarChart',data=data)
n1$print()
n1$save('n1.html',cdn=TRUE)
n1 <- nPlot(x=mpg,y=dist,group='cyl',type='multiBarChart',data=data)
n1$save('n1.html',cdn=TRUE)
runApp()
n1$html
n1$html()
n1 <- nPlot(mpg~dist,group='cyl',type='multiBarChart',data=data)
n1 <- nPlot(mpg~disp,group='cyl',type='multiBarChart',data=mtcars)
n1
n1
n1$html
n1$html()
n1$save('n1.html',cdn=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
n1 <- nPlot(mpg~disp,group='cyl',type='multiBarChart',data=mtcars)
n1$save('n2.html',cdn=TRUE)
getwd()
runApp()
runApp()
runApp()
?mtcars
runApp()
runApp()
?tabPanel
runApp()
runApp()
?mtcars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
mtcars
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(shinyapps)
install.packages("shinyapps)
")"
"
install.packages("shinyapps")
